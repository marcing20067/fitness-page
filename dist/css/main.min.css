html{font-size:62.5%;scroll-padding:4rem;scroll-behavior:smooth}body{width:100%;font-size:1.6rem;color:#000;font-family:Lato,sans-serif}*,:after,:before{margin:0;padding:0;box-sizing:border-box;line-height:125%}.hamburger-div{position:fixed;top:0;left:0;display:flex;align-items:center;justify-content:flex-end;padding:0;height:6rem;width:100%;background-color:#000;z-index:100}.hamburger-div .hamburger{padding:1rem 1.5rem}.nav__box{position:fixed;top:6rem;left:100%;height:calc(100vh - 6rem);background-color:#000;z-index:100;transition:transform .5s;width:100%}.nav__box--active{transform:translateX(-100%)}.nav__list{height:100%;display:flex;flex-direction:column;align-items:center;justify-content:space-around;list-style:none}.nav__link{display:block;color:#fff;text-decoration:none;transition:transform .3s}.nav__link:hover{transform:scale(1.15)}@media (min-width:1024px){.nav{width:100%}.nav,.nav__box{top:0;left:0;height:7rem}.nav__box{transition:none;transform:none}.nav__list{flex-direction:row;justify-content:space-between}.hamburger-div{display:none}}.wrapper{margin:0 auto;width:80%;max-width:1600px}.section-padding{padding:4rem 0}.h2{margin-bottom:.5em;font-size:3.5rem;text-align:center}@media (min-width:768px){.h2{font-size:2em}.section-padding{padding:7rem 0}}@media (min-width:992px){.h2{font-size:4rem}}.gray{color:#fff;background-color:#333}.white{color:#000;background-color:#fff}.black{color:#fff;background-color:#000}.click-element{padding:.4em .8em;border:3px solid transparent}.click-element:focus{outline:none;border:3px solid #fff}.click-element--black:focus{border:3px solid #820}.bottom-scroll-class{animation:b 1.5s forwards}@media (min-width:768px){.bottom-scroll-class:first-of-type,.bottom-scroll-class:nth-of-type(3){animation-delay:.3s}}.scale-scroll-class{animation:a .7s forwards}@media (min-width:768px){.scale-scroll-class:nth-of-type(2){animation-delay:.2s}.scale-scroll-class:nth-of-type(3){animation-delay:.3s}.scale-scroll-class:nth-of-type(4){animation-delay:.4s}}.animation{opacity:0}@keyframes a{0%{transform:scale(.6);opacity:0}to{transform:scale(1);opacity:1}}@keyframes b{0%{transform:translateY(50%);opacity:0}to{transform:translateX(0);opacity:1}}@media (min-width:992px){.hero-animation{animation:c .6s ease forwards}@keyframes c{0%{height:0}to{height:60vh}}}@media (min-width:2000px){.hero-animation{animation-duration:.8s}}.header{position:relative;display:flex;height:100vh;color:#fff;overflow:hidden;align-items:center;justify-content:flex-end;flex-direction:column;width:100%}.header__hero-img{position:absolute;top:6rem;width:100%;min-height:calc(100vh - 6rem);filter:brightness(.5);z-index:-2;left:0}.header__box-content{margin:0 auto}.header__wrapper{margin-bottom:2em}.header__title{margin-bottom:1rem;text-align:left}.header__text{margin-bottom:.5rem}.header__text:last-of-type{margin-bottom:1em}.header__box-links{display:flex;justify-content:space-between}.header__link{position:relative;padding:.5em 1em;color:#fff;background-color:#000;border-radius:8px;border-width:2px;text-decoration:none;transition:background-color .3s,border-color .3s,color .3s}.header__link:hover{background-color:#fff;border-color:#000;color:#000}.about-firm{display:flex;flex-direction:column;align-items:center;justify-content:center;background-size:cover;background-position:50%;background-attachment:fixed;background-image:linear-gradient(45deg,rgba(0,0,0,.75),rgba(0,0,0,.75)),url(../images/exercise-mobile.jpg);color:#fff}.about-firm__text:first-of-type{margin-bottom:.5em}.why-we__title{width:100%}.why-we__element,.why-we__wrapper{display:flex;flex-direction:column}.why-we__element{align-items:center;margin-bottom:2rem}.why-we__element-icon{width:7.5rem;margin-bottom:1rem}@media (max-width:500px) and (orientation:portrait){.header__hero-img{top:6rem;left:50%;transform:translateX(-50%);min-height:calc(100vh - 6rem);min-width:100%}}.our-localization .wrapper{display:grid;grid-template-columns:1fr;grid-template-rows:auto repeat(3,1fr);row-gap:1.5em;overflow:hidden}.our-localization__title{margin:0}.our-localization__element{padding-bottom:1em;border:1px solid #000;border-radius:20px;text-align:right}.our-localization__element-img{width:100%;border-radius:20px 20px 0 0}.our-localization__element-list{padding:0 1em;list-style:none}.our-localization__element-list-item-heading{margin:1rem 0;text-align:left}.our-localization__element-list-item-heading:before{display:inline-block;height:1em;width:1em;background-size:1em 1em;background-image:url(../images/icons/map-pin.svg);background-repeat:no-repeat;content:""}.our-localization__element-list-item:nth-of-type(2) .our-localization__element-list-item-heading:before{background-image:url(../images/icons/users-black.svg)}.our-localization__element-list-item:nth-of-type(3) .our-localization__element-list-item-heading:before{background-image:url(../images/icons/phone.svg)}.our-localization__element-coach-list{margin:1.5rem 0;display:flex;align-items:center;justify-content:flex-end}.our-localization__element-coach-list-box{position:relative;margin-right:.5rem;height:5rem;width:5rem;border-radius:50%;overflow:hidden}.our-localization__element-coach-list-img{height:100%;min-width:100%;background-color:#000}.opinion__title{margin-bottom:1em}.opinion .slider{display:grid;grid-template-columns:1fr 1fr 1fr;grid-template-rows:auto 1fr}.opinion .slider__btn{padding:0;width:7rem;opacity:.7;background:none;transition:opacity .3s;cursor:pointer}.opinion .slider__btn:hover{opacity:1}.opinion .slider__btn-icon{width:100%}.opinion .slider__back-btn{grid-row:2/3;grid-column:1/2}.opinion .slider__next-btn{grid-row:2/3;grid-column:3/4;margin-left:auto}.opinion .slider__extra-box{grid-column:1/4;grid-row:1/2;width:100%;overflow:hidden}.opinion .slider__box{display:grid;grid-template-rows:1fr;grid-template-columns:repeat(4,1fr);width:calc(400% + 3em * 4);transition:transform .7s}.opinion .slider__box--slide1{transform:translateX(0)}.opinion .slider__box--slide2{transform:translateX(-25%)}.opinion .slider__box--slide3{transform:translateX(-50%)}.opinion .slider__box--slide4{transform:translateX(-75%)}.opinion .slider__box-item{padding:1.5rem;margin-right:3em;background-color:#fff}.opinion .slider__box-item-img{width:100%}.opinion .slider__box-item-text{margin-top:1rem}.opinion .slider__box-item-heading{margin-top:10rem}.footer{background-color:#111;padding-bottom:0}.footer__wrapper{padding-top:0;max-width:80%;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.footer__nav-list{list-style:none;margin-bottom:2rem}.footer__nav-list-item{margin-bottom:.5rem}.footer__nav-list-item:last-child{margin-bottom:0}.footer__nav-list-item-link{text-decoration:none;color:hsla(0,0%,100%,.9);position:relative;display:inline-block;overflow:hidden;z-index:0}.footer__nav-list-item-link:after{z-index:-1;content:"";position:absolute;width:100%;height:100%;background-color:#fff;bottom:0;transform:translateY(100%);left:0;transition:transform .3s}.footer__nav-list-item-link:hover{color:#000}.footer__nav-list-item-link:hover:after{transform:translateY(0)}.footer__box-icons{margin-right:.5rem}.footer__box-text{display:flex;align-items:center;margin-bottom:.5rem}.footer__text{text-align:center;border-top:1px solid hsla(0,0%,100%,.8);border-bottom:1px solid hsla(0,0%,100%,.8);padding:1rem;width:100%}@media (min-width:768px){.footer__title{margin-bottom:0}.footer__container{display:flex}.footer__wrapper{width:100%;display:flex;justify-content:space-between}.footer__nav{margin-right:3rem}.footer__nav-list{margin-bottom:0}.footer__text{padding:1.5rem 1rem}}@media (min-width:1024px){.footer__text{padding:2rem 1rem}.footer__nav{margin-right:6rem}}@media (min-width:767px){html{scroll-padding:7rem}.about-firm{background-image:linear-gradient(45deg,rgba(0,0,0,.75),rgba(0,0,0,.75)),url(../images/exercise.jpg)}.why-we__title{grid-column:1/4;grid-row:1/2}.why-we__wrapper{display:grid;grid-template-columns:auto 1fr auto;grid-row:auto auto auto}.why-we__element{grid-row:2/3}.why-we__element:nth-child(odd){grid-column:1/2}.why-we__element:nth-child(2),.why-we__element:nth-child(3){grid-row:3/4}.why-we__element:nth-child(2n){grid-column:3/4}.why-we__element-icon{margin-bottom:1rem}.our-localization__title{grid-row:1/2}.opinion .slider__btn{width:10rem}}@media (min-width:992px){.header{justify-content:center;align-items:center;color:#000}.header .box{height:0;max-height:90rem;overflow:hidden}.header__wrapper{width:80%;display:flex;justify-content:space-between;align-items:center;margin-bottom:0}.header__box-links,.header__text{width:100%}.header__box-content{display:grid;grid-template-columns:auto;grid-template-rows:auto auto auto;margin:0 2.5em 0 0;max-width:85rem;width:50%}.header__title{margin-bottom:1rem;font-size:5rem}.header__hero-img{position:static;width:auto;height:60vh;min-height:0;max-height:90rem;filter:none}.header:after{display:none}.header__link{padding:.6em 1.2em}.why-we__wrapper{display:flex;justify-content:space-between;flex-direction:row;flex-wrap:wrap}.why-we__title{grid-row:1/2;grid-column:1/5}.why-we__element{grid-row:2/3}.why-we__element:nth-of-type(2){grid-column:2/3}.why-we__element:nth-of-type(3){grid-column:3/4}.why-we__element:nth-of-type(4){grid-column:4/5}.our-localization .wrapper{grid-template-columns:1fr 1fr 1fr;grid-template-rows:auto 1fr 1fr}.our-localization__title{grid-row:1/2;grid-column:1/4}.our-localization__element{grid-row:2/3}.our-localization__element:first-of-type{grid-column:1/2}.our-localization__element:nth-of-type(2){grid-column:3/4}.our-localization__element:nth-of-type(3){grid-row:3/4;grid-column:2/3}.opinion .slider{grid-template-columns:1fr auto 1fr;grid-template-rows:1fr auto 1fr;column-gap:2em}.opinion .slider__next-btn{margin:0}.opinion .slider__extra-box{grid-column:2/3;grid-row:1/4}.opinion .slider__box{width:calc(200% + 3em*2)}.opinion .slider__box-item{padding:2rem}}@media (min-width:992px) and (orientation:portrait){.header__hero-img{height:40vh}}@media (min-width:1200px){.header__box-content{width:45%}.our-localization .wrapper{grid-template-rows:auto 5rem 1fr 5rem;column-gap:3em}.our-localization__title{grid-row:1/2;grid-column:1/4}.our-localization__element{grid-row:3/5}.our-localization__element:first-of-type{grid-column:1/2}.our-localization__element:nth-of-type(2){grid-column:2/3;grid-row:2/4}.our-localization__element:nth-of-type(3){grid-row:3/5;grid-column:3/4}}@media (min-width:1500px){.our-localization .wrapper{column-gap:4em;width:80%}.our-localization__element-list{padding:0 1.5rem}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
